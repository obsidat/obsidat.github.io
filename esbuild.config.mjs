// @ts-check

import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import esbuildSvelte from 'esbuild-svelte';
import { sveltePreprocess } from 'svelte-preprocess';
import { nodeModulesPolyfillPlugin } from 'esbuild-plugins-node-modules-polyfill';
import { createContext, CONSTANTS } from 'esbuild-multicontext';
import { htmlPlugin } from '@craftamap/esbuild-plugin-html';
import { copy } from 'esbuild-plugin-copy';

const buildContext = createContext({});

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

buildContext.add('plugin', {
	banner: {
		js: banner,
	},
	plugins: [
		esbuildSvelte({
			compilerOptions: { css: 'injected' },
			preprocess: sveltePreprocess(),
		}),
		/* nodeModulesPolyfillPlugin({
			globals: {
				process: true,
				Buffer: true,
			},
			modules: ['buffer'],
		}), */
	],
	entryPoints: ["src/index.tsx"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2020", // TODO drop to es2018, loses bigint
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,

	platform: 'node',
});

if (prod) {
	await buildContext.build();
	process.exit(0);
} else {
	await buildContext.watch();
}
