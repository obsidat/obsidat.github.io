// @ts-check

import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import esbuildSvelte from 'esbuild-svelte';
import { sveltePreprocess } from 'svelte-preprocess';
import { nodeModulesPolyfillPlugin } from 'esbuild-plugins-node-modules-polyfill';
import { createContext, CONSTANTS } from 'esbuild-multicontext';
import { htmlPlugin } from '@craftamap/esbuild-plugin-html';
import { copy } from 'esbuild-plugin-copy';

const buildContext = createContext({});

const banner =
	`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

buildContext.add('plugin', {
	banner: {
		js: banner,
	},
	plugins: [
		esbuildSvelte({
			compilerOptions: { css: 'injected' },
			preprocess: sveltePreprocess(),
		}),
		/* nodeModulesPolyfillPlugin({
			globals: {
				process: true,
				Buffer: true,
			},
			modules: ['buffer'],
		}), */
	],
	entryPoints: ["src/index.tsx"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2020", // TODO drop to es2018, loses bigint
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,

	platform: 'node',
});

buildContext.add('spa', {
	entryPoints: ['./spa/src/index.ts'],
	bundle: true,
	format: 'esm',
	outdir: './spa/dist',
	metafile: true, // needs to be set
	sourceRoot: './spa',
	conditions: ['svelte'],
	plugins: [
		esbuildSvelte({
			compilerOptions: { css: 'injected' },
			preprocess: sveltePreprocess(),
		}),

		htmlPlugin({
			files: [
				{
					entryPoints: [
						'./spa/src/index.ts',
					],
					filename: 'index.html',
					title: 'Svelte 4 + svelte-spa-router + TypeScript',
					scriptLoading: 'module',
					htmlTemplate: `
						<!doctype html>
						<html lang="en">
						<head>
							<meta charset="UTF-8" />
							<link rel="icon" type="image/svg+xml" href="/svelte.svg" />
							<meta name="viewport" content="width=device-width, initial-scale=1.0" />
							<script src="index.js" type="module" defer></script>
						</head>
						<body>
							<div id="app"></div>
						</body>
						</html>
					`,
				},
			]
		}),

		copy({
			// this is equal to process.cwd(), which means we use cwd path as base path to resolve `to` path
			// if not specified, this plugin uses ESBuild.build outdir/outfile options as base path.
			resolveFrom: 'cwd',
			assets: {
				from: ['./spa/public/*'],
				to: ['./spa/dist'],
			},
			watch: true,
		}),

		nodeModulesPolyfillPlugin({
			globals: {
				process: true,
				Buffer: true,
			},
			modules: {
				buffer: true,
				path: true,
				util: true,
				process: true,
			},
		}),
	],
	// banner: {
	//     js: "new EventSource('http://127.0.0.1:8888/esbuild').addEventListener('change', () => location.reload())"
	// },
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	logLevel: 'info',
});

if (prod) {
	await buildContext.build();
	process.exit(0);
} else {
	await buildContext.watch();
}
