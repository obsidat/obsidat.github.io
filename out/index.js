/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/real-index.ts
var real_index_exports = {};
__export(real_index_exports, {
  default: () => MyPlugin
});
var import_obsidian, DEFAULT_SETTINGS, MyPlugin, SampleModal, SampleSettingTab;
var init_real_index = __esm({
  "src/real-index.ts"() {
    import_obsidian = require("obsidian");
    DEFAULT_SETTINGS = {
      mySetting: "default"
    };
    MyPlugin = class extends import_obsidian.Plugin {
      async onload() {
        await this.loadSettings();
        const ribbonIconEl = this.addRibbonIcon("dice", "Sample Plugin", (evt) => {
          new import_obsidian.Notice("This is a notice!");
        });
        ribbonIconEl.addClass("my-plugin-ribbon-class");
        const statusBarItemEl = this.addStatusBarItem();
        statusBarItemEl.setText("Status Bar Text");
        this.addCommand({
          id: "open-sample-modal-simple",
          name: "Open sample modal (simple)",
          callback: () => {
            new SampleModal(this.app).open();
          }
        });
        this.addCommand({
          id: "sample-editor-command",
          name: "Sample editor command",
          editorCallback: (editor, view) => {
            console.log(editor.getSelection());
            editor.replaceSelection("Sample Editor Command");
          }
        });
        this.addCommand({
          id: "open-sample-modal-complex",
          name: "Open sample modal (complex)",
          checkCallback: (checking) => {
            const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
            if (markdownView) {
              if (!checking) {
                new SampleModal(this.app).open();
              }
              return true;
            }
          }
        });
        this.addSettingTab(new SampleSettingTab(this.app, this));
        this.registerDomEvent(document, "click", (evt) => {
          console.log("click", evt);
        });
        this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
      }
      onunload() {
      }
      async loadSettings() {
        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
      }
      async saveSettings() {
        await this.saveData(this.settings);
      }
    };
    SampleModal = class extends import_obsidian.Modal {
      constructor(app) {
        super(app);
      }
      onOpen() {
        const { contentEl } = this;
        contentEl.setText("Woah!");
      }
      onClose() {
        const { contentEl } = this;
        contentEl.empty();
      }
    };
    SampleSettingTab = class extends import_obsidian.PluginSettingTab {
      constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
      }
      display() {
        const { containerEl } = this;
        containerEl.empty();
        new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
          this.plugin.settings.mySetting = value;
          await this.plugin.saveSettings();
        }));
      }
    };
  }
});

// src/index.ts
(async () => {
  global.Buffer = typeof Buffer !== "undefined" ? (await import("buffer")).Buffer : Buffer;
  await Promise.resolve().then(() => (init_real_index(), real_index_exports));
})();
//# sourceMappingURL=data:application/json;base64,
